// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using QL_Ung_Vien.Areas.Identity.Data;

#nullable disable

namespace QL_Ung_Vien.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20231026075411_initDataCandidate1")]
    partial class initDataCandidate1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.23")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("QL_Ung_Vien.Areas.Identity.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("firstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("lastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("QL_Ung_Vien.Models.Application", b =>
                {
                    b.Property<string>("jobID")
                        .HasColumnType("varchar(20)");

                    b.Property<string>("candidateID")
                        .HasColumnType("varchar(20)");

                    b.Property<int?>("aStatement")
                        .HasColumnType("int");

                    b.Property<DateTime?>("applyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("level")
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("jobID", "candidateID");

                    b.HasIndex("candidateID");

                    b.ToTable("Application", (string)null);
                });

            modelBuilder.Entity("QL_Ung_Vien.Models.Benefit", b =>
                {
                    b.Property<string>("benefitID")
                        .HasColumnType("varchar(10)");

                    b.Property<string>("benefitContent")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("benefitID");

                    b.ToTable("Benefit", (string)null);
                });

            modelBuilder.Entity("QL_Ung_Vien.Models.Candidate", b =>
                {
                    b.Property<string>("candidateID")
                        .HasColumnType("varchar(20)");

                    b.Property<string>("CVID")
                        .HasColumnType("varchar(20)");

                    b.Property<string>("ImageID")
                        .HasColumnType("varchar(20)");

                    b.Property<int?>("cStatement")
                        .HasColumnType("int");

                    b.Property<string>("email")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("firstName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("lastName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("phoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.HasKey("candidateID");

                    b.HasIndex("CVID");

                    b.HasIndex("ImageID");

                    b.ToTable("Candidate", (string)null);
                });

            modelBuilder.Entity("QL_Ung_Vien.Models.CV", b =>
                {
                    b.Property<string>("cVID")
                        .HasColumnType("varchar(20)");

                    b.Property<string>("path")
                        .HasColumnType("varchar(500)");

                    b.HasKey("cVID");

                    b.ToTable("CV", (string)null);
                });

            modelBuilder.Entity("QL_Ung_Vien.Models.HR", b =>
                {
                    b.Property<string>("hRID")
                        .HasColumnType("varchar(20)");

                    b.Property<string>("ImageID")
                        .HasColumnType("varchar(20)");

                    b.Property<string>("email")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("firstName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("lastName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("phoneNumber")
                        .HasColumnType("varchar(20)");

                    b.HasKey("hRID");

                    b.HasIndex("ImageID");

                    b.ToTable("HR", (string)null);
                });

            modelBuilder.Entity("QL_Ung_Vien.Models.Image", b =>
                {
                    b.Property<string>("imageID")
                        .HasColumnType("varchar(20)");

                    b.Property<string>("path")
                        .HasColumnType("varchar(500)");

                    b.HasKey("imageID");

                    b.ToTable("Image", (string)null);
                });

            modelBuilder.Entity("QL_Ung_Vien.Models.Interview", b =>
                {
                    b.Property<string>("interviewID")
                        .HasColumnType("varchar(20)");

                    b.Property<string>("candidateID")
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime?>("interviewDate")
                        .HasColumnType("datetime");

                    b.Property<string>("jobID")
                        .HasColumnType("varchar(20)");

                    b.HasKey("interviewID");

                    b.HasIndex("candidateID");

                    b.HasIndex("jobID");

                    b.ToTable("Interview", (string)null);
                });

            modelBuilder.Entity("QL_Ung_Vien.Models.InterviewProcess", b =>
                {
                    b.Property<string>("ipID")
                        .HasColumnType("varchar(20)");

                    b.Property<string>("InterviewResultiRID")
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime?>("date")
                        .HasColumnType("datetime");

                    b.Property<string>("hRID")
                        .HasColumnType("varchar(20)");

                    b.Property<string>("iRID")
                        .HasColumnType("varchar(20)");

                    b.Property<string>("interviewID")
                        .HasColumnType("varchar(20)");

                    b.HasKey("ipID");

                    b.HasIndex("InterviewResultiRID");

                    b.HasIndex("hRID");

                    b.HasIndex("interviewID");

                    b.ToTable("InterviewProcess", (string)null);
                });

            modelBuilder.Entity("QL_Ung_Vien.Models.InterviewResult", b =>
                {
                    b.Property<string>("iRID")
                        .HasColumnType("varchar(20)");

                    b.Property<string>("comment")
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("iRStatement")
                        .HasColumnType("int");

                    b.HasKey("iRID");

                    b.ToTable("InterviewResult", (string)null);
                });

            modelBuilder.Entity("QL_Ung_Vien.Models.Job", b =>
                {
                    b.Property<string>("jobID")
                        .HasColumnType("varchar(20)");

                    b.Property<string>("ImageID")
                        .HasColumnType("varchar(20)");

                    b.Property<string>("benefitID")
                        .HasColumnType("varchar(10)");

                    b.Property<string>("benifitID")
                        .HasColumnType("varchar(20)");

                    b.Property<string>("jD")
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("jobName")
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("requirementID")
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime?>("timeClose")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("timeOpen")
                        .HasColumnType("datetime2");

                    b.HasKey("jobID");

                    b.HasIndex("ImageID");

                    b.HasIndex("benefitID");

                    b.HasIndex("requirementID");

                    b.ToTable("Job", (string)null);
                });

            modelBuilder.Entity("QL_Ung_Vien.Models.Requirement", b =>
                {
                    b.Property<string>("requirementID")
                        .HasColumnType("varchar(20)");

                    b.Property<string>("requirementContent")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("requirementID");

                    b.ToTable("Requirement", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("QL_Ung_Vien.Areas.Identity.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("QL_Ung_Vien.Areas.Identity.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QL_Ung_Vien.Areas.Identity.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("QL_Ung_Vien.Areas.Identity.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QL_Ung_Vien.Models.Application", b =>
                {
                    b.HasOne("QL_Ung_Vien.Models.Candidate", "Candidate")
                        .WithMany("Application")
                        .HasForeignKey("candidateID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QL_Ung_Vien.Models.Job", "Job")
                        .WithMany("Applications")
                        .HasForeignKey("jobID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Candidate");

                    b.Navigation("Job");
                });

            modelBuilder.Entity("QL_Ung_Vien.Models.Candidate", b =>
                {
                    b.HasOne("QL_Ung_Vien.Models.CV", "CV")
                        .WithMany()
                        .HasForeignKey("CVID");

                    b.HasOne("QL_Ung_Vien.Models.Image", "Image")
                        .WithMany()
                        .HasForeignKey("ImageID");

                    b.Navigation("CV");

                    b.Navigation("Image");
                });

            modelBuilder.Entity("QL_Ung_Vien.Models.HR", b =>
                {
                    b.HasOne("QL_Ung_Vien.Models.Image", "Image")
                        .WithMany()
                        .HasForeignKey("ImageID");

                    b.Navigation("Image");
                });

            modelBuilder.Entity("QL_Ung_Vien.Models.Interview", b =>
                {
                    b.HasOne("QL_Ung_Vien.Models.Candidate", "Candidate")
                        .WithMany("Interviews")
                        .HasForeignKey("candidateID");

                    b.HasOne("QL_Ung_Vien.Models.Job", "Job")
                        .WithMany("Interviews")
                        .HasForeignKey("jobID");

                    b.Navigation("Candidate");

                    b.Navigation("Job");
                });

            modelBuilder.Entity("QL_Ung_Vien.Models.InterviewProcess", b =>
                {
                    b.HasOne("QL_Ung_Vien.Models.InterviewResult", "InterviewResult")
                        .WithMany()
                        .HasForeignKey("InterviewResultiRID");

                    b.HasOne("QL_Ung_Vien.Models.HR", "HR")
                        .WithMany("InterviewProcesses")
                        .HasForeignKey("hRID");

                    b.HasOne("QL_Ung_Vien.Models.Interview", "Interview")
                        .WithMany("InterviewProcesses")
                        .HasForeignKey("interviewID");

                    b.Navigation("HR");

                    b.Navigation("Interview");

                    b.Navigation("InterviewResult");
                });

            modelBuilder.Entity("QL_Ung_Vien.Models.Job", b =>
                {
                    b.HasOne("QL_Ung_Vien.Models.Image", "Image")
                        .WithMany()
                        .HasForeignKey("ImageID");

                    b.HasOne("QL_Ung_Vien.Models.Benefit", "Benefit")
                        .WithMany("jobs")
                        .HasForeignKey("benefitID");

                    b.HasOne("QL_Ung_Vien.Models.Requirement", "Requirement")
                        .WithMany("Jobs")
                        .HasForeignKey("requirementID");

                    b.Navigation("Benefit");

                    b.Navigation("Image");

                    b.Navigation("Requirement");
                });

            modelBuilder.Entity("QL_Ung_Vien.Models.Benefit", b =>
                {
                    b.Navigation("jobs");
                });

            modelBuilder.Entity("QL_Ung_Vien.Models.Candidate", b =>
                {
                    b.Navigation("Application");

                    b.Navigation("Interviews");
                });

            modelBuilder.Entity("QL_Ung_Vien.Models.HR", b =>
                {
                    b.Navigation("InterviewProcesses");
                });

            modelBuilder.Entity("QL_Ung_Vien.Models.Interview", b =>
                {
                    b.Navigation("InterviewProcesses");
                });

            modelBuilder.Entity("QL_Ung_Vien.Models.Job", b =>
                {
                    b.Navigation("Applications");

                    b.Navigation("Interviews");
                });

            modelBuilder.Entity("QL_Ung_Vien.Models.Requirement", b =>
                {
                    b.Navigation("Jobs");
                });
#pragma warning restore 612, 618
        }
    }
}
